// copyright-holders:K.Ito
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing.Design;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using Melanchall.DryWetMidi.Common;
using Melanchall.DryWetMidi.Core;
using Melanchall.DryWetMidi.MusicTheory;
using Newtonsoft.Json;
using Omu.ValueInjecter;
using Omu.ValueInjecter.Injections;
using zanac.MAmidiMEmo.ComponentModel;
using zanac.MAmidiMEmo.Gui;
using zanac.MAmidiMEmo.Instruments.Envelopes;
using zanac.MAmidiMEmo.Mame;
using zanac.MAmidiMEmo.Midi;

//https://www.plutiedev.com/ym2612-registers
//http://www.smspower.org/maxim/Documents/YM2612#regb4

namespace zanac.MAmidiMEmo.Instruments.Chips
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class YM2612 : InstrumentBase
    {

        public override string Name => "YM2612";

        public override string Group => "FM";

        public override InstrumentType InstrumentType => InstrumentType.YM2612;

        [Browsable(false)]
        public override string ImageKey => "YM2612";

        /// <summary>
        /// 
        /// </summary>
        [Browsable(false)]
        protected override string SoundInterfaceTagNamePrefix => "ym2612_";

        /// <summary>
        /// 
        /// </summary>
        [Category("MIDI")]
        [Description("MIDI Device ID")]
        [IgnoreDataMember]
        [JsonIgnore]
        public override uint DeviceID
        {
            get
            {
                return 2;
            }
        }

        private byte f_LFOEN;

        /// <summary>
        /// LFRQ (0-255)
        /// </summary>
        [DataMember]
        [Category("Chip")]
        [Description("LFO Enable (0:Off 1:Enable)")]
        [SlideParametersAttribute(0, 1)]
        [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
        [DefaultValue((byte)0)]
        public byte LFOEN
        {
            get
            {
                return f_LFOEN;
            }
            set
            {
                byte v = (byte)(value & 1);
                if (f_LFOEN != v)
                {
                    f_LFOEN = v;
                    Ym2612WriteData(UnitNumber, 0x22, 0, 0, (byte)(LFOEN << 3 | LFRQ));
                }
            }
        }

        private byte f_LFRQ;

        /// <summary>
        /// LFRQ (0-7)
        /// </summary>
        [DataMember]
        [Category("Chip")]
        [Description("LFO Freq (0-7)\r\n" +
            "0:	3.82 Hz\r\n" +
            "1: 5.33 Hz\r\n" +
            "2: 5.77 Hz\r\n" +
            "3: 6.11 Hz\r\n" +
            "4: 6.60 Hz\r\n" +
            "5: 9.23 Hz\r\n" +
            "6: 46.11 Hz\r\n" +
            "7: 69.22 Hz\r\n")]
        [SlideParametersAttribute(0, 7)]
        [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
        [DefaultValue((byte)0)]
        public byte LFRQ
        {
            get
            {
                return f_LFRQ;
            }
            set
            {
                byte v = (byte)(value & 7);
                if (f_LFRQ != v)
                {
                    f_LFRQ = v;
                    Ym2612WriteData(UnitNumber, 0x22, 0, 0, (byte)(LFOEN << 3 | LFRQ));
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [Browsable(false)]
        public override TimbreBase[] BaseTimbres
        {
            get
            {
                return Timbres;
            }
        }

        [DataMember]
        [Category("Chip")]
        [Description("Timbres (0-127)")]
        [EditorAttribute(typeof(DummyEditor), typeof(UITypeEditor))]
        [TypeConverter(typeof(ExpandableCollectionConverter))]
        public YM2612Timbre[] Timbres
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="serializeData"></param>
        public override void RestoreFrom(string serializeData)
        {
            try
            {
                using (var obj = JsonConvert.DeserializeObject<YM2612>(serializeData))
                    this.InjectFrom(new LoopInjection(new[] { "SerializeData" }), obj);
            }
            catch (Exception ex)
            {
                if (ex.GetType() == typeof(Exception))
                    throw;
                else if (ex.GetType() == typeof(SystemException))
                    throw;


                System.Windows.Forms.MessageBox.Show(ex.ToString());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="address"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void delegate_ym2612_write(uint unitNumber, uint address, byte data);


        /// <summary>
        /// 
        /// </summary>
        private static delegate_ym2612_write Ym2612_write
        {
            get;
            set;
        }


        /// <summary>
        /// 
        /// </summary>
        private static void Ym2612WriteData(uint unitNumber, byte address, int op, int slot, byte data)
        {
            switch (op)
            {
                case 0:
                    op = 0;
                    break;
                case 1:
                    op = 2;
                    break;
                case 2:
                    op = 1;
                    break;
                case 3:
                    op = 3;
                    break;
            }
            uint reg = (uint)(slot / 3) * 2;

            DeferredWriteData(Ym2612_write, unitNumber, reg + 0, (byte)(address + (op * 4) + (slot % 3)));
            DeferredWriteData(Ym2612_write, unitNumber, reg + 1, data);
            /*
            try
            {
                Program.SoundUpdating();
                Ym2612_write(unitNumber, reg + 0, (byte)(address + (op * 4) + (slot % 3)));
                Ym2612_write(unitNumber, reg + 1, data);
            }
            finally
            {
                Program.SoundUpdated();
            }*/
        }

        private const float DEFAULT_GAIN = 1.5f;

        public override bool ShouldSerializeGainLeft()
        {
            return GainLeft != DEFAULT_GAIN;
        }

        public override void ResetGainLeft()
        {
            GainLeft = DEFAULT_GAIN;
        }

        public override bool ShouldSerializeGainRight()
        {
            return GainRight != DEFAULT_GAIN;
        }

        public override void ResetGainRight()
        {
            GainRight = DEFAULT_GAIN;
        }

        /// <summary>
        /// 
        /// </summary>
        static YM2612()
        {
            IntPtr funcPtr = MameIF.GetProcAddress("ym2612_write");
            if (funcPtr != IntPtr.Zero)
            {
                Ym2612_write = (delegate_ym2612_write)Marshal.GetDelegateForFunctionPointer(funcPtr, typeof(delegate_ym2612_write));
            }
        }

        private YM2612SoundManager soundManager;

        /// <summary>
        /// 
        /// </summary>
        public YM2612(uint unitNumber) : base(unitNumber)
        {
            GainLeft = DEFAULT_GAIN;
            GainRight = DEFAULT_GAIN;

            Timbres = new YM2612Timbre[InstrumentBase.MAX_TIMBRES];
            for (int i = 0; i < InstrumentBase.MAX_TIMBRES; i++)
                Timbres[i] = new YM2612Timbre();
            setPresetInstruments();

            this.soundManager = new YM2612SoundManager(this);
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Dispose()
        {
            soundManager?.Dispose();
            base.Dispose();
        }

        string[] presets = {
            "3,0,30,14,0,6,15,39,1,1,0,0,0,28,6,4,3,2,28,3,5,0,0,0,26,2,2,4,3,22,0,1,0,0,0,26,6,4,6,4,0,2,1,0,0,0",
            "3,0,30,4,4,2,5,39,2,1,0,0,0,30,4,4,3,15,28,2,5,0,0,0,30,4,4,2,13,25,2,1,0,0,0,30,4,2,5,4,10,0,1,0,0,0",
            "5,6,26,4,4,4,6,20,1,4,0,0,0,26,2,2,6,7,8,2,1,0,0,0,26,6,6,4,14,11,1,2,0,0,0,26,2,2,5,15,8,2,2,0,0,0",
            "5,6,30,2,4,5,14,26,0,1,3,2,0,26,6,4,10,3,2,2,2,7,2,0,24,2,4,5,3,23,0,1,7,0,0,26,6,6,10,3,2,2,2,3,2,0",
            "3,1,22,6,4,10,3,27,1,3,0,1,0,22,4,4,9,4,27,3,3,0,0,0,20,8,2,4,1,19,1,2,0,0,0,20,2,2,7,8,5,0,1,0,1,0",
            "5,5,30,8,10,12,11,35,0,7,0,2,0,30,4,2,8,15,4,2,1,0,2,0,30,0,2,11,1,18,1,1,0,2,0,30,4,2,7,15,4,0,1,0,2,0",
            "6,4,28,4,4,5,0,0,1,1,0,0,0,30,4,0,5,3,20,3,6,0,0,0,30,6,0,1,6,28,2,7,0,0,0,28,4,4,7,15,4,0,1,0,0,0",
            "3,5,30,2,2,6,15,24,0,1,0,2,0,30,2,2,5,0,29,0,1,0,2,0,30,6,6,7,2,27,1,7,0,2,0,30,4,4,9,2,8,0,3,0,2,0",
            "5,2,28,12,12,5,15,21,2,9,0,0,0,26,8,8,4,14,6,0,1,0,0,0,28,12,12,6,12,22,3,11,0,0,0,28,8,8,4,14,6,0,1,0,0,0",
            "7,0,30,18,6,4,4,9,0,7,0,2,0,30,22,4,3,11,15,0,4,0,2,0,30,6,4,4,4,18,1,2,0,2,0,30,8,6,4,14,4,0,1,0,2,0",
            "5,0,10,10,4,2,0,32,2,2,0,0,0,30,8,6,2,0,1,1,1,3,0,0,20,10,4,2,0,28,0,9,0,0,0,30,4,2,1,0,6,0,1,7,0,0",
            "5,0,24,8,4,4,2,23,0,7,0,2,0,26,18,4,5,6,7,2,4,0,2,0,24,8,4,3,2,30,0,8,0,2,0,26,4,6,4,15,7,0,1,0,1,0",
            "5,7,20,14,8,4,15,40,1,12,0,0,0,22,8,8,5,15,5,0,1,0,0,0,22,14,12,4,15,33,0,6,0,0,0,26,8,10,5,15,5,0,1,0,0,0",
            "5,2,30,18,12,6,13,24,2,5,0,0,0,30,14,10,7,13,3,0,1,0,0,0,30,12,12,6,10,29,2,5,0,0,0,30,12,12,7,14,0,2,1,0,0,0",
            "5,0,30,8,6,3,5,16,1,10,0,1,0,30,6,4,3,2,5,0,1,0,0,0,30,8,6,3,5,16,1,7,3,1,0,30,6,4,3,2,5,2,2,7,0,0",
            "6,3,28,20,8,4,12,6,2,2,0,0,0,22,6,6,3,5,20,1,3,0,0,0,26,6,6,3,0,10,0,1,0,0,0,24,8,8,4,6,6,0,1,0,0,0",
            "2,0,30,8,0,12,0,0,2,0,0,1,0,30,10,0,12,0,0,1,1,0,0,0,26,10,0,12,1,7,2,3,1,1,0,30,2,0,12,0,7,2,2,0,1,0",
            "7,4,28,10,0,10,1,3,2,0,2,2,0,26,16,0,0,5,29,0,2,0,0,0,28,10,0,10,1,1,2,1,3,0,0,28,12,0,10,0,1,2,2,7,0,0",
            "7,4,30,30,0,13,0,9,1,1,3,3,0,22,30,0,10,1,5,1,1,0,2,0,30,30,0,14,0,9,0,2,6,0,0,30,30,0,14,0,9,0,0,7,1,0",
            "7,0,18,30,0,5,0,19,2,3,0,0,0,22,14,0,2,2,29,0,7,0,0,0,16,30,0,5,0,4,2,1,0,0,0,16,14,0,5,0,4,2,0,0,0,0",
            "5,3,14,16,0,5,1,24,2,2,0,0,0,10,30,0,6,0,0,2,1,0,0,0,12,24,0,5,3,10,1,1,0,0,0,10,30,0,7,0,0,1,2,0,0,0",
            "5,2,16,4,0,0,1,21,0,3,6,0,0,14,4,0,10,2,2,1,1,7,0,0,12,30,0,0,1,18,0,1,2,0,0,14,30,0,10,0,7,2,2,3,0,0",
            "4,0,30,30,0,9,0,44,3,14,0,0,0,30,30,0,8,0,41,0,10,0,0,0,30,30,0,8,0,36,0,1,0,0,0,12,30,0,8,0,3,2,2,0,0,0",
            "5,4,14,24,0,0,0,15,0,2,1,1,0,14,4,0,10,0,10,2,2,1,0,0,14,30,0,0,0,20,0,1,0,0,0,14,30,0,10,0,10,0,1,0,1,0",
            "5,6,28,2,2,4,8,21,1,1,0,0,0,30,6,6,7,15,0,0,1,0,0,0,22,10,10,5,4,14,0,3,0,0,0,26,8,8,9,15,13,2,1,0,0,0",
            "4,4,30,14,2,4,2,26,2,9,0,2,0,30,6,2,8,5,45,2,13,0,2,0,30,4,2,4,1,23,2,1,0,2,0,26,6,4,8,15,4,0,1,0,1,0",
            "3,0,30,14,2,7,3,17,1,1,0,2,0,30,10,2,4,2,18,3,5,0,2,0,30,4,0,7,15,31,1,3,0,2,0,24,4,0,8,15,4,0,1,0,2,0",
            "5,0,30,20,4,2,1,15,1,1,0,0,0,30,4,4,9,15,3,2,1,0,0,0,30,4,4,3,6,16,1,3,0,0,0,28,8,8,8,6,3,2,1,0,0,0",
            "5,7,26,16,12,7,7,17,0,0,0,0,0,28,18,6,9,7,0,0,0,0,0,0,28,6,6,8,9,4,3,1,0,0,0,22,8,6,10,3,0,0,1,0,0,0",
            "4,2,30,16,0,2,15,19,0,0,7,2,0,24,2,0,1,1,15,1,2,3,2,0,22,4,0,10,1,15,0,1,0,2,0,22,2,2,10,1,10,0,2,0,2,0",
            "4,4,22,24,0,2,0,8,1,2,0,0,0,24,10,0,10,1,29,0,1,0,0,0,24,10,0,10,1,23,0,2,0,0,0,24,2,0,10,5,15,0,1,0,0,0",
            "5,5,30,4,16,7,0,22,1,0,0,0,0,26,6,6,9,15,6,0,2,0,0,0,22,4,16,7,0,17,0,0,0,0,0,20,14,14,7,15,13,0,2,0,0,0",
            "5,3,22,6,6,8,10,14,1,1,0,0,0,24,6,6,8,11,0,0,1,0,0,0,18,6,6,1,1,7,3,1,0,0,0,24,6,6,8,10,5,0,1,0,0,0",
            "3,6,20,4,2,3,1,28,2,1,0,2,0,18,8,6,6,4,58,0,12,0,2,0,22,6,4,3,2,22,2,1,0,2,0,22,2,2,8,2,0,0,2,0,2,0",
            "3,5,30,14,4,3,1,19,2,1,0,2,0,24,22,8,6,7,21,0,7,0,2,0,30,18,4,6,2,23,2,2,0,2,0,22,4,12,8,6,0,0,1,0,2,0",
            "3,4,24,6,4,3,1,29,2,1,2,2,0,20,6,6,6,3,25,2,1,1,2,0,18,6,4,6,1,25,2,1,0,2,0,22,2,4,8,2,0,0,2,0,2,0",
            "3,3,30,14,4,3,2,14,2,1,0,2,0,30,12,12,6,4,21,0,9,0,2,0,24,18,4,6,2,24,2,1,0,2,0,30,4,30,8,15,3,0,1,0,2,0",
            "3,2,30,14,4,3,1,14,2,1,0,2,0,22,10,12,7,2,18,0,13,0,2,0,18,18,4,6,2,30,2,1,0,2,0,30,4,12,8,6,6,0,1,0,2,0",
            "3,5,28,12,4,8,5,14,0,1,0,0,0,28,8,2,8,6,39,1,2,0,0,0,28,4,2,8,6,35,0,1,0,0,0,28,4,4,8,9,0,0,1,0,0,0",
            "5,6,30,10,14,8,6,20,0,2,0,2,0,30,2,14,8,12,0,1,2,0,2,0,30,6,14,7,6,20,0,1,0,2,0,30,4,14,8,12,0,1,1,0,2,0",
            "5,2,12,0,0,3,0,18,2,1,0,0,0,12,8,0,7,2,3,0,1,5,0,0,28,10,14,10,0,6,1,4,0,0,0,12,14,14,7,15,3,2,1,1,0,0",
            "5,2,12,0,0,3,0,9,2,1,0,0,0,12,12,0,7,1,3,0,1,0,0,0,28,12,14,7,0,8,1,1,0,0,0,12,14,14,7,15,3,2,1,0,0,0",
            "3,4,30,12,0,6,0,16,0,1,0,0,0,30,10,30,14,15,20,0,5,0,2,0,30,10,0,7,2,45,0,1,0,0,0,12,6,0,7,1,1,2,3,0,0,0",
            "3,6,30,12,0,2,0,25,0,1,0,0,0,30,12,30,14,15,21,0,5,0,2,0,30,12,0,4,3,27,0,3,0,0,0,12,6,0,7,1,0,2,2,0,0,0",
            "5,3,14,4,0,3,1,22,2,1,2,0,0,12,6,0,6,1,2,0,2,0,1,0,14,6,0,4,0,22,1,1,4,0,0,12,6,0,6,1,2,0,1,0,2,0",
            "5,7,30,22,10,11,9,20,0,1,0,0,0,28,14,16,7,2,0,0,1,0,0,0,30,14,12,5,15,17,1,1,0,0,0,24,12,10,6,15,0,0,1,0,0,0",
            "3,6,30,16,10,8,4,41,0,2,0,0,0,22,16,14,9,4,33,0,5,0,0,0,22,14,6,2,4,33,2,1,0,0,0,30,8,4,2,1,4,0,1,0,2,0",
            "3,3,30,16,8,3,3,4,1,1,0,2,0,30,4,4,2,15,33,0,0,7,2,0,30,14,6,3,0,28,2,1,0,2,0,30,8,6,3,15,0,0,0,0,2,0",
            "7,2,10,20,0,6,0,11,2,1,1,1,0,24,12,0,6,1,24,0,2,0,0,0,12,12,0,6,1,7,2,1,5,0,0,12,10,0,6,1,5,0,2,3,1,0",
            "7,3,12,20,0,5,0,0,0,1,3,0,0,24,12,0,5,1,23,0,1,0,1,0,10,12,0,6,0,0,2,1,5,0,0,10,10,0,6,1,7,0,1,7,0,0",
            "5,0,18,16,0,2,1,27,0,1,6,0,0,14,30,0,5,0,7,0,1,3,0,0,18,22,0,2,0,20,0,1,3,0,0,12,30,0,4,0,0,1,1,7,0,0",
            "5,5,18,16,0,2,1,19,0,1,0,0,0,12,12,0,5,0,6,0,1,0,0,0,16,16,0,2,0,10,0,1,0,0,0,10,14,0,4,3,0,1,1,0,0,0",
            "5,5,24,0,0,0,15,19,0,6,0,0,0,12,6,0,5,6,23,2,4,0,0,0,14,30,0,3,0,30,1,1,0,0,0,10,30,0,5,0,0,0,2,0,0,0",
            "5,7,24,0,0,0,15,20,0,5,0,1,0,14,6,0,5,6,20,2,4,0,0,0,14,14,0,4,3,26,2,1,0,0,0,18,2,0,5,0,0,0,1,0,0,0",
            "5,0,20,0,0,4,15,22,0,1,0,0,0,14,30,0,5,1,8,2,1,0,0,0,18,30,0,4,0,26,1,1,0,0,0,14,30,0,5,0,0,2,3,0,0,0",
            "7,5,30,8,8,6,6,0,0,4,0,1,0,24,10,6,3,1,0,0,1,0,0,0,24,14,12,6,0,0,0,1,0,0,0,22,14,14,6,0,0,0,0,0,0,0",
            "3,6,16,16,0,5,1,20,0,1,0,0,0,20,16,0,5,4,23,2,3,0,0,0,14,14,0,6,1,26,2,1,0,0,0,18,30,0,8,0,6,0,1,0,0,0",
            "3,7,14,12,0,7,1,28,0,1,0,0,0,18,16,0,5,4,15,2,1,0,0,0,12,14,0,7,1,26,2,1,0,0,0,16,30,0,8,0,5,0,1,0,0,0",
            "3,7,12,10,0,6,2,34,0,1,0,0,0,24,16,0,11,4,24,2,1,0,0,0,18,14,0,9,3,17,2,1,0,0,0,14,30,0,8,0,0,0,2,0,0,0",
            "5,0,14,0,0,7,5,26,0,3,0,0,0,18,26,0,9,4,0,0,0,0,0,0,14,18,0,6,1,19,0,5,0,0,0,16,14,0,9,2,0,0,1,0,0,0",
            "5,0,14,18,0,0,0,16,3,1,2,0,0,18,28,0,7,0,1,2,1,7,0,0,12,18,0,2,1,22,2,1,6,1,0,20,28,0,7,0,1,2,1,3,0,0",
            "5,6,16,12,0,2,1,22,0,1,7,2,0,18,30,0,8,0,8,0,1,7,2,0,14,14,0,5,1,22,0,1,0,2,0,18,16,0,8,0,7,0,1,0,2,0",
            "5,6,14,12,0,8,2,16,0,1,7,2,0,18,30,0,10,0,10,0,1,7,2,0,14,12,0,8,2,16,0,1,0,2,0,18,16,0,10,0,10,0,1,0,2,0",
            "3,6,12,6,0,4,1,28,0,1,0,0,0,18,14,0,5,7,39,0,6,0,0,0,14,10,6,3,11,35,0,1,0,0,0,30,30,0,7,0,4,0,1,0,0,0",
            "3,0,30,18,12,6,3,29,0,3,0,0,0,16,4,0,6,0,26,0,1,0,0,0,16,10,0,0,0,12,1,1,0,0,0,16,12,0,8,1,3,0,1,0,0,0",
            "5,4,18,6,0,0,0,10,2,1,0,2,0,16,4,0,9,0,9,0,1,0,2,0,18,6,0,0,0,13,2,1,0,2,0,18,4,0,9,0,21,0,1,0,2,0",
            "5,3,14,6,0,0,0,5,2,1,0,2,0,14,4,0,9,0,15,0,1,0,2,0,14,6,0,0,0,8,2,1,0,2,0,14,4,0,9,0,13,2,1,0,2,0",
            "5,6,14,6,0,5,0,18,2,1,0,0,0,14,4,0,8,2,6,0,2,0,0,0,14,10,0,1,0,14,1,2,0,0,0,14,8,0,8,1,5,0,1,0,0,0",
            "5,0,20,0,0,4,0,30,2,1,0,0,0,18,2,2,9,0,9,0,3,0,0,0,22,0,0,4,2,24,0,1,0,1,0,20,0,0,10,0,14,0,2,0,0,0",
            "5,0,20,0,0,4,0,34,2,1,0,0,0,18,2,2,9,1,11,0,3,0,0,0,22,0,0,4,2,24,0,1,0,1,0,20,0,2,10,1,11,0,2,0,0,0",
            "5,0,24,14,0,0,1,24,2,1,0,0,0,14,2,0,8,1,0,2,3,0,0,0,24,14,0,0,1,24,2,1,0,0,0,14,2,0,8,1,3,0,3,1,0,0",
            "5,7,14,4,0,1,1,37,2,2,0,0,0,16,4,0,8,1,3,0,1,0,0,0,10,4,0,1,1,26,1,4,0,0,0,14,4,0,8,1,3,0,1,0,0,0",
            "5,7,20,24,0,7,1,12,0,5,0,0,0,18,14,0,8,15,39,0,1,0,0,0,16,10,0,7,1,30,0,1,0,0,0,16,10,0,10,0,6,0,1,0,0,0",
            "5,7,26,20,0,1,1,7,0,3,0,0,0,14,16,0,11,3,37,0,3,0,0,0,28,16,0,9,0,39,0,1,0,1,0,12,10,0,10,0,1,0,1,0,0,0",
            "5,7,18,12,14,10,0,58,0,2,0,1,0,16,10,0,10,0,4,0,1,0,0,0,20,18,12,6,9,15,0,7,0,0,0,16,10,0,10,0,36,0,1,0,1,0",
            "5,7,20,0,0,6,0,0,1,13,0,1,0,22,20,2,10,0,35,0,10,0,1,0,16,30,0,4,0,44,0,2,0,0,0,16,0,0,9,0,5,0,1,0,1,0",
            "5,7,24,24,0,7,1,12,0,5,0,0,0,14,14,0,9,6,27,0,1,0,0,0,14,16,0,8,3,11,3,2,0,1,0,14,10,0,8,0,1,0,1,0,0,0",
            "5,7,20,24,0,5,1,6,0,5,0,0,0,12,14,0,9,5,23,0,1,0,1,0,20,16,0,3,3,2,1,0,0,2,0,12,10,0,9,0,1,0,1,0,0,0",
            "2,0,12,20,0,6,0,5,0,1,0,0,0,16,16,0,7,0,5,0,1,0,2,0,12,20,18,7,0,44,0,1,0,2,0,12,16,0,7,0,5,0,1,7,2,0",
            "5,7,16,12,14,8,0,60,1,2,0,0,0,16,10,0,9,0,0,0,1,0,0,0,20,18,12,6,9,15,0,1,0,0,0,14,10,0,10,0,26,0,1,0,0,0",
            "5,0,30,30,0,7,4,46,3,1,0,0,0,20,30,0,10,0,3,2,1,0,0,0,30,30,0,2,3,38,3,2,0,0,0,20,30,0,10,0,3,2,1,0,0,0",
            "5,7,30,0,0,7,0,26,0,1,7,2,0,26,30,0,7,0,10,0,1,7,2,0,30,30,0,3,0,20,1,1,0,2,0,28,30,0,8,0,10,0,1,0,2,0",
            "5,7,24,8,0,7,8,0,0,4,0,1,0,24,12,0,6,7,20,1,4,0,2,0,16,12,0,5,5,3,1,2,0,0,0,12,8,0,8,1,2,0,1,0,1,0",
            "5,0,14,14,0,2,6,4,1,1,4,0,0,30,12,0,8,0,11,0,1,0,0,0,14,14,0,2,6,3,1,1,1,0,0,30,12,0,8,0,11,0,1,2,0,0",
            "5,0,18,4,0,6,2,8,2,1,4,2,0,18,2,0,8,2,14,0,2,0,0,0,18,4,0,6,2,10,2,1,1,2,0,18,2,0,8,2,14,0,2,1,0,0",
            "5,0,8,0,0,0,15,13,0,7,0,0,0,14,6,0,8,6,19,0,2,0,0,0,14,30,0,9,0,28,1,1,0,1,0,14,30,0,8,0,2,0,1,0,0,0",
            "7,0,24,2,2,8,1,21,0,1,0,2,0,24,2,2,6,2,15,0,1,1,2,0,24,0,0,8,0,26,0,2,4,2,0,24,2,2,8,1,6,0,3,1,2,0",
            "5,0,22,4,0,3,0,22,0,1,0,0,0,20,4,0,9,0,17,0,1,0,0,0,24,6,8,4,5,11,2,1,0,0,0,26,6,0,9,6,12,0,1,0,0,0",
            "5,5,30,30,6,3,0,38,0,7,0,2,0,30,14,8,4,0,11,2,5,0,2,0,12,2,0,1,0,24,2,1,7,0,0,16,2,0,5,1,0,2,1,0,0,0",
            "5,7,20,0,0,5,0,40,0,1,1,0,0,6,0,0,4,0,2,0,1,0,0,0,20,0,0,3,0,47,0,1,3,0,0,6,0,0,4,0,2,0,1,2,0,0",
            "5,0,12,10,0,4,1,34,0,1,7,0,0,20,10,0,6,1,2,2,2,6,0,0,12,6,0,3,1,34,0,1,0,0,0,18,6,0,5,0,0,2,1,2,0,0",
            "5,2,20,0,0,0,15,33,0,1,7,2,0,8,6,0,7,3,22,2,8,0,0,0,14,6,0,3,0,33,1,1,0,0,0,12,30,0,5,0,0,0,2,3,0,0",
            "5,4,4,2,0,3,4,42,2,7,0,0,0,12,4,0,5,3,0,0,1,0,0,0,4,2,0,3,4,42,2,7,1,0,0,12,4,0,5,3,0,0,1,2,0,0",
            "5,6,30,4,0,3,0,23,2,1,0,0,0,10,12,0,4,0,3,2,1,5,0,0,30,12,0,3,3,7,1,1,0,0,0,10,14,0,4,0,4,1,1,1,0,0",
            "5,6,8,2,0,3,1,37,0,1,5,2,0,12,4,0,5,0,0,2,1,7,0,0,24,10,0,4,1,30,0,1,3,2,0,16,4,0,5,0,0,2,1,0,0,0",
            "5,0,8,16,0,3,0,30,0,1,5,0,0,6,16,0,4,0,0,2,1,3,0,0,6,2,0,4,0,34,2,2,2,0,0,14,4,0,5,0,0,2,1,7,0,0",
            "5,1,30,16,0,6,8,2,3,10,0,2,0,16,10,2,2,0,0,0,1,0,3,0,30,16,0,6,8,2,3,10,2,2,0,16,10,2,2,0,0,0,1,3,2,0",
            "5,3,12,6,0,3,3,18,2,3,0,0,0,8,4,0,4,0,9,1,3,0,0,0,12,6,0,3,3,16,0,1,0,0,0,8,2,0,4,1,3,2,1,0,0,0",
            "5,5,30,16,2,5,4,20,1,6,0,2,0,24,4,4,4,7,9,0,1,0,2,0,30,16,2,5,4,20,1,14,2,2,0,24,4,4,4,7,9,0,1,2,2,0",
            "5,4,12,6,4,4,15,21,1,1,0,0,0,30,6,0,4,3,0,0,1,0,0,0,24,6,0,4,15,16,1,2,3,0,0,18,12,10,4,3,12,0,2,7,0,0",
            "2,0,30,2,2,4,5,7,2,1,3,0,0,30,4,10,4,15,7,0,1,3,0,0,30,2,2,4,5,7,2,1,1,0,0,30,4,10,4,15,7,0,1,1,0,0",
            "5,4,2,2,0,1,2,18,2,3,7,2,0,4,2,0,4,1,9,2,3,0,0,0,4,2,0,2,0,20,0,1,0,2,0,6,2,0,3,0,3,2,1,4,2,0",
            "5,0,8,6,0,0,5,34,0,2,0,0,0,20,4,0,12,0,14,2,1,0,0,0,6,6,0,2,2,35,0,1,0,1,0,20,30,0,3,0,0,0,1,0,0,0",
            "5,2,10,6,0,3,8,25,1,2,0,0,0,12,2,2,4,2,6,0,1,7,0,0,10,6,0,3,8,25,1,2,3,0,0,12,2,2,4,2,6,0,1,3,0,0",
            "5,3,26,4,6,2,5,10,2,2,0,2,0,30,4,12,4,15,8,0,7,0,2,0,26,4,6,2,5,3,2,1,1,2,0,30,4,12,4,15,8,0,4,1,2,0",
            "5,0,26,6,4,1,1,10,0,1,0,0,0,26,6,6,5,14,0,2,3,0,0,0,30,14,8,2,1,15,0,6,0,0,0,30,14,16,8,14,0,2,1,0,0,0",
            "3,4,30,2,2,3,2,26,0,1,0,2,0,30,20,10,6,7,20,0,3,0,2,0,30,16,6,3,3,24,0,5,0,2,0,30,8,8,4,15,1,0,3,0,2,0",
            "3,6,30,14,10,5,2,20,2,3,0,0,0,30,18,16,8,4,21,2,5,0,0,0,30,4,4,3,15,42,0,1,0,0,0,30,4,4,2,15,3,0,1,0,2,0",
            "5,6,30,20,10,6,10,8,1,4,3,2,0,24,4,6,5,0,8,0,1,0,2,0,30,16,10,6,10,14,1,5,2,2,0,24,4,8,4,0,8,0,1,4,2,0",
            "5,1,22,18,0,12,1,16,2,1,0,2,0,14,30,0,13,0,11,0,3,1,2,0,20,18,0,9,3,0,0,1,0,2,0,16,12,0,13,0,10,0,4,0,2,0",
            "5,2,16,18,0,3,1,7,2,1,0,0,0,12,12,0,7,2,0,0,1,0,2,0,24,12,14,7,0,9,1,2,0,0,0,18,6,14,8,14,25,2,1,0,0,0",
            "5,0,20,0,0,4,0,16,2,1,0,0,0,18,2,2,9,0,13,0,6,0,0,0,22,0,0,4,2,24,0,1,0,1,0,20,0,0,10,0,15,0,2,0,0,0",
            "5,3,30,12,6,4,5,16,1,14,0,2,0,24,12,14,6,14,11,2,2,0,2,0,24,12,4,2,5,30,0,7,7,2,0,30,10,8,5,13,1,0,6,0,2,0",
            "5,1,28,20,8,4,2,23,0,7,0,2,0,30,14,12,6,1,8,0,5,0,2,0,28,18,12,4,2,33,0,10,7,2,0,30,14,12,6,7,4,0,2,0,2,0",
            "7,0,8,8,8,5,2,0,0,2,0,2,0,12,12,6,4,0,22,0,2,0,2,0,28,8,8,4,2,0,0,2,0,2,0,30,8,8,4,2,0,0,0,3,0,0",
            "5,5,30,20,18,9,2,33,2,5,1,2,0,30,20,14,7,2,0,0,2,3,2,0,30,20,20,8,2,28,0,10,3,2,0,30,20,14,7,2,0,0,2,0,2,0",
            "4,7,30,22,8,3,5,24,0,0,0,0,0,30,24,20,3,1,19,0,4,0,0,0,30,24,8,3,4,11,0,3,0,0,0,30,28,10,5,0,0,0,0,0,0,0",
            "5,7,30,18,16,8,5,14,2,1,0,2,0,30,6,10,5,14,0,0,0,0,2,0,30,6,8,4,5,12,2,0,0,2,0,30,8,8,4,14,0,0,0,0,2,0",
            "5,2,28,22,16,10,2,0,0,0,7,0,0,24,6,0,4,15,0,0,0,0,0,0,30,8,0,4,7,0,0,0,0,2,0,30,14,0,7,15,0,0,0,0,2,0",
            "5,7,8,30,0,0,0,0,0,14,0,2,0,4,30,30,15,15,6,0,9,0,1,0,8,30,0,0,0,0,0,14,0,2,0,4,30,30,15,15,6,0,14,0,2,0",
            "5,7,30,16,8,6,2,0,2,6,0,2,0,16,12,8,10,8,15,2,3,0,2,0,30,12,4,6,2,0,0,6,0,2,0,16,16,16,10,8,0,2,6,0,2,0",
            "5,7,20,24,0,5,1,14,0,5,0,0,0,14,16,16,9,15,5,0,1,0,0,0,20,24,0,5,1,9,0,8,0,0,0,16,16,14,9,15,12,0,1,0,0,0",
            "3,7,30,30,0,0,0,4,0,3,0,0,0,30,4,4,2,15,21,0,0,0,0,0,30,0,8,4,15,12,0,0,0,0,0,2,4,8,4,15,0,0,0,0,0,0",
            "5,0,6,14,6,3,10,21,2,5,0,2,0,10,12,14,7,3,0,1,10,0,2,0,6,14,6,3,10,21,2,5,0,2,0,10,12,8,4,3,0,1,10,7,3,0",
            "5,5,22,4,0,0,6,28,1,5,0,2,0,30,8,6,3,1,3,0,4,0,2,0,22,4,0,0,6,28,1,5,0,2,0,30,8,6,3,1,15,0,4,7,2,0",
            "5,5,30,12,0,0,0,1,0,15,0,2,0,4,0,0,5,0,4,0,0,0,2,0,30,0,0,0,0,24,0,0,0,2,0,4,0,0,5,0,11,0,0,0,2,0",
            "5,7,30,24,0,1,0,0,0,0,0,0,0,8,4,0,5,0,8,0,0,0,0,0,12,0,0,1,15,0,0,9,0,1,0,6,0,14,7,15,7,0,3,0,0,0",
            "5,7,30,6,0,0,15,11,0,5,0,0,0,30,12,16,8,11,4,0,15,0,0,0,30,4,0,0,15,2,0,5,0,0,0,30,12,16,8,11,26,0,5,0,0,0"
        };

        string[] drums ={
            "5,6,30,0,30,15,0,56,0,6,0,2,0,30,16,30,15,12,0,0,5,0,2,0,30,22,30,15,11,39,0,10,0,2,0,28,22,30,15,15,1,0,5,0,2,0",
            "5,7,30,16,0,0,3,0,0,5,0,2,0,18,16,16,11,11,0,2,0,0,2,0,30,16,12,14,3,36,0,12,0,2,0,24,26,16,8,0,44,2,1,0,2,0",
            "5,7,30,10,0,6,0,0,0,0,0,2,0,18,16,0,10,6,0,0,0,0,3,0,30,0,0,15,15,0,0,0,0,0,0,6,12,6,15,6,21,0,1,0,3,0",
            "5,7,30,0,0,0,0,0,0,4,0,2,0,24,16,12,12,9,0,0,14,0,2,0,22,20,8,7,13,9,0,0,0,2,0,16,16,22,11,13,0,2,0,0,2,0",
            "5,7,30,10,0,3,0,0,0,5,5,2,0,18,12,0,10,6,0,0,3,0,3,0,30,0,0,15,15,0,0,9,0,0,0,6,12,6,15,6,16,0,3,0,3,0",
            "5,7,14,0,0,2,0,13,0,8,3,1,0,30,10,0,9,3,0,0,0,6,0,0,30,20,16,4,3,8,0,3,0,2,0,28,12,14,7,5,0,0,0,0,2,0",
            "5,6,30,14,10,9,15,2,0,7,0,2,0,20,16,10,15,15,0,0,5,0,2,0,30,10,12,5,0,39,0,2,0,2,0,24,20,18,9,10,20,0,5,0,2,0",
            "5,7,30,24,0,0,1,9,0,0,0,2,0,30,14,14,7,3,0,0,0,0,2,0,28,22,14,5,15,48,0,7,0,2,0,30,20,12,0,0,28,0,0,0,2,0",
            "6,7,30,18,24,8,9,0,1,15,0,2,0,26,20,4,8,11,0,0,10,0,2,0,26,16,4,5,5,21,1,11,0,2,0,24,22,18,7,11,0,0,13,0,2,0",
            "5,1,30,20,22,6,15,0,0,2,0,2,0,30,12,12,5,7,16,0,2,0,2,0,22,18,14,4,7,13,0,5,0,2,0,30,14,16,5,7,0,0,1,0,2,0",
            "5,7,30,0,10,5,0,5,0,12,0,2,0,30,14,14,7,7,0,0,11,0,2,0,30,20,12,6,8,0,0,12,0,2,0,30,14,14,7,7,0,0,7,0,2,0",
            "5,6,30,26,14,7,15,0,0,13,0,2,0,30,14,14,4,7,0,0,2,0,2,0,30,18,14,6,7,19,0,3,0,2,0,30,16,20,6,11,0,0,2,0,2,0",
            "5,6,30,26,14,6,15,14,0,13,0,2,0,30,14,14,7,7,12,0,2,0,2,0,30,18,14,4,7,9,0,2,0,2,0,30,14,16,6,7,0,0,1,0,2,0",
            "5,6,30,4,0,8,5,8,0,10,0,2,0,26,18,6,3,15,0,0,7,0,2,0,22,0,0,9,13,0,0,9,0,2,0,26,18,22,9,11,0,0,0,0,2,0",
            "5,7,30,0,10,7,0,7,0,12,0,2,0,30,14,20,9,7,0,0,8,0,2,0,30,10,14,8,6,0,0,12,0,2,0,30,14,14,6,7,1,0,7,0,2,0",
            "5,7,30,8,8,6,0,2,0,0,0,2,0,30,12,18,4,1,0,0,0,0,2,0,30,16,0,15,1,0,2,13,1,2,0,30,20,18,8,5,0,2,15,0,2,0",
            "5,7,30,2,0,7,0,10,0,12,0,2,0,30,14,22,7,13,0,0,11,0,0,0,30,20,12,5,8,9,0,9,0,2,0,30,16,20,6,1,0,0,7,0,2,0",
            "5,4,26,20,12,6,15,9,0,12,0,2,0,30,20,14,11,7,0,0,5,0,2,0,30,6,10,5,15,21,0,0,0,2,0,30,12,10,6,7,0,0,5,0,2,0",
            "5,7,30,0,0,0,3,2,0,15,0,2,0,22,16,24,8,11,0,2,0,0,2,0,30,6,6,13,3,12,0,0,0,2,0,22,20,16,11,0,0,2,13,0,2,0",
            "5,0,24,10,12,6,15,0,0,12,0,2,0,30,18,14,11,7,0,0,11,0,2,0,30,8,8,5,15,26,0,0,0,2,0,30,12,8,6,5,0,0,5,0,2,0",
            "5,7,30,0,0,0,3,0,0,12,0,2,0,14,16,16,8,11,15,2,0,0,2,0,30,6,10,14,3,8,0,6,0,2,0,16,6,16,8,0,0,2,5,0,2,0",
            "5,0,24,10,12,6,15,1,0,10,0,2,0,30,16,14,9,7,0,0,1,0,2,0,30,6,10,5,15,17,0,0,0,2,0,30,12,10,5,7,0,0,5,0,2,0",
            "5,7,30,0,0,0,3,2,0,15,0,2,0,22,14,12,8,11,1,2,0,0,2,0,30,6,6,13,3,12,0,0,0,2,0,22,18,10,11,0,9,2,13,0,2,0",
            "5,0,24,10,12,6,15,0,0,10,0,2,0,30,18,14,10,6,0,0,8,0,2,0,30,8,4,5,15,28,0,0,0,2,0,30,12,10,7,7,2,0,4,0,2,0",
            "5,0,24,8,12,5,15,9,0,10,0,2,0,30,18,14,7,7,0,0,1,0,2,0,30,8,10,5,15,39,0,1,0,2,0,30,12,12,7,7,3,0,4,0,2,0",
            "5,3,30,18,0,6,0,14,0,13,0,2,0,18,6,8,5,2,3,0,11,0,0,0,22,6,0,4,0,0,0,15,0,2,0,24,8,10,5,7,13,0,15,0,2,0",
            "5,0,24,8,12,7,15,4,0,8,0,2,0,30,20,14,8,7,0,0,6,0,2,0,30,10,10,6,15,50,0,1,0,2,0,24,12,10,6,7,0,0,5,0,2,0",
            "5,7,30,14,0,0,4,9,2,15,0,2,0,28,8,8,4,14,3,0,9,0,2,0,30,0,0,0,4,8,2,14,0,2,0,30,8,4,5,13,16,0,14,0,2,0",
            "5,7,30,6,14,2,1,31,0,0,0,2,0,28,6,10,2,0,0,0,5,0,0,0,30,2,16,3,6,15,0,2,0,2,0,18,4,10,3,0,9,0,0,0,2,0",
            "5,7,30,14,0,0,4,22,2,15,0,2,0,30,10,8,4,14,0,0,15,0,2,0,30,0,0,0,4,12,2,12,0,2,0,30,10,4,5,13,27,0,15,0,2,0",
            "5,6,16,14,8,1,2,10,0,11,0,2,0,28,14,24,11,5,0,0,5,0,2,0,16,14,10,2,2,0,0,11,0,2,0,26,14,24,7,6,0,0,15,0,2,0",
            "5,7,24,12,6,3,0,0,0,8,0,0,0,18,6,8,3,12,0,0,13,0,0,0,10,0,6,3,0,1,0,5,0,0,0,24,6,10,8,6,0,0,15,0,0,0",
            "5,4,30,18,16,5,3,0,2,3,0,2,0,20,14,10,3,3,0,0,0,0,2,0,30,30,22,9,10,3,0,4,0,2,0,30,24,10,5,3,32,0,1,0,2,0",
            "5,7,30,12,0,0,0,0,2,9,0,2,0,18,8,4,2,0,0,0,0,0,0,0,30,6,0,0,0,0,2,15,0,2,0,18,12,6,4,3,8,0,7,4,2,0",
            "5,7,26,2,4,6,0,0,0,1,2,1,0,30,12,10,9,2,0,0,0,6,0,0,30,10,8,4,0,29,0,6,0,2,0,30,12,10,4,0,0,0,0,0,2,0",
            "5,7,30,0,0,6,0,5,0,14,0,3,0,28,10,10,4,11,16,0,15,0,2,0,30,0,0,0,4,7,2,9,0,2,0,30,10,6,5,14,0,0,9,0,2,0",
            "5,3,30,10,24,12,0,0,0,6,0,2,0,30,10,16,7,0,0,0,11,0,2,0,30,10,24,12,0,2,0,15,0,2,0,30,8,14,3,0,0,0,15,0,2,0",
            "5,3,30,10,24,12,0,0,0,6,0,2,0,30,10,16,7,0,7,0,11,0,2,0,30,10,24,12,0,6,0,15,0,2,0,30,10,16,3,0,0,0,15,0,2,0",
            "5,4,28,28,20,10,1,6,0,0,2,2,0,30,16,18,10,1,0,0,1,0,2,0,30,0,0,0,0,44,0,0,0,2,0,30,26,18,10,1,7,0,0,0,2,0",
            "5,7,20,20,10,8,12,38,0,10,0,2,0,24,12,14,9,4,0,0,12,0,2,0,30,20,12,8,8,0,0,12,0,2,0,30,14,14,9,7,0,0,2,0,2,0",
            "5,7,20,20,10,8,12,31,0,10,0,2,0,24,10,12,9,4,0,0,12,0,2,0,30,20,12,8,8,0,0,12,0,2,0,30,14,14,9,7,0,0,2,0,2,0",
            "3,6,24,14,0,8,0,22,0,2,0,2,0,30,18,12,8,0,49,0,7,0,2,0,26,12,20,6,1,26,0,9,0,2,0,30,18,12,8,0,6,0,9,0,2,0",
            "3,6,24,14,0,8,0,22,0,2,0,2,0,30,18,12,8,0,49,0,7,0,2,0,26,12,20,6,1,23,0,12,0,2,0,30,18,12,8,0,4,0,9,0,2,0",
            "5,5,28,24,12,6,2,21,0,7,0,2,0,30,16,12,6,1,10,0,2,0,2,0,28,24,12,5,2,26,0,7,0,2,0,30,16,12,6,1,10,0,2,0,2,0",
            "5,5,28,24,12,6,2,21,0,7,0,2,0,30,16,12,6,1,10,0,2,0,2,0,28,24,10,5,2,13,0,7,0,2,0,30,16,12,6,1,29,0,2,0,2,0",
            "3,7,30,0,6,5,6,0,0,7,0,2,0,28,16,8,4,10,24,0,15,0,2,0,28,8,4,6,4,0,0,15,0,2,0,16,22,18,4,0,2,0,15,0,2,0",
            "4,7,30,0,6,5,6,4,0,15,0,2,0,16,16,8,4,6,3,0,15,0,2,0,24,18,6,3,15,0,0,15,0,2,0,14,20,20,3,8,0,0,15,0,2,0",
            "5,5,30,0,0,7,0,10,0,0,0,1,0,24,2,0,12,1,43,0,14,0,1,0,30,0,0,7,0,23,0,0,0,2,0,16,2,0,12,0,6,0,15,0,1,0",
            "5,5,30,0,0,7,0,10,0,0,0,1,0,24,2,0,12,1,43,0,14,0,1,0,30,0,0,7,0,23,0,0,0,2,0,16,2,0,12,0,6,0,15,0,1,0",
            "3,7,24,4,12,0,0,12,0,1,0,0,0,24,6,12,10,0,0,0,3,0,0,0,26,2,0,6,0,32,0,14,5,0,0,30,14,24,15,6,0,0,0,1,0,0",
            "3,7,24,4,12,0,0,14,0,1,0,0,0,24,6,12,10,0,0,0,3,0,0,0,30,0,0,6,0,32,0,13,0,0,0,18,12,28,12,6,5,0,0,2,0,0",
            "4,0,26,14,12,6,10,11,0,7,0,2,0,30,28,22,3,10,13,0,7,0,2,0,30,22,16,0,12,0,0,0,0,2,0,30,6,16,8,0,0,0,15,0,2,0",
            "4,0,28,12,12,6,10,63,0,15,0,2,0,30,12,12,5,11,0,0,6,0,2,0,26,24,0,10,12,0,0,7,0,2,0,30,14,24,7,4,0,0,3,0,2,0",
            "4,0,28,12,12,6,10,63,0,15,0,2,0,30,12,12,5,11,0,0,6,0,2,0,30,20,0,10,12,16,0,10,0,2,0,24,14,24,12,4,0,0,3,0,2,0",
            "5,0,26,20,24,13,11,15,2,0,0,2,0,12,0,12,5,0,6,0,6,0,2,0,30,16,16,12,0,14,0,0,0,2,0,12,0,14,7,0,2,0,6,0,2,0",
            "5,1,18,16,30,8,15,12,0,0,0,0,0,14,12,16,8,4,0,0,14,0,0,0,30,14,0,0,0,36,0,2,0,2,0,26,14,22,11,12,18,0,11,0,2,0",
            "7,0,30,24,16,4,0,5,0,9,0,2,0,22,10,18,5,6,0,0,15,0,2,0,30,22,24,7,3,7,0,14,0,2,0,28,26,16,11,15,6,0,6,0,2,0",
            "7,0,30,10,10,4,0,3,0,9,0,2,0,22,10,18,5,6,0,0,15,0,2,0,30,18,18,7,3,8,0,14,0,2,0,28,10,10,11,15,3,0,6,0,2,0",
            "4,7,18,0,6,5,6,0,0,7,0,2,0,18,12,8,4,6,4,0,3,0,2,0,28,8,4,6,4,1,0,12,0,2,0,18,20,18,4,8,2,0,15,0,2,0",
            "5,0,14,12,0,0,0,20,0,6,0,2,0,12,22,10,5,4,0,0,2,0,2,0,6,0,0,2,0,7,0,6,0,2,0,14,10,4,6,15,0,0,9,0,2,0",
            "5,7,24,8,4,0,0,24,0,3,0,2,0,8,6,10,5,4,0,0,2,0,3,0,6,0,0,2,0,7,0,7,0,3,0,10,8,4,6,6,2,0,3,0,3,0",
        };

        /// <summary>
        /// 
        /// </summary>
        private void setPresetInstruments()
        {
            //for (int i = 0; i < 128; i++)
            //    Timbres[i].MmlSerializeData = presets[i];

            //for (int i = 0; i < drums.Length; i++)
            //    Timbres[128 + i].MmlSerializeData = drums[i];

            //Brass Section.dmp
            Timbres[0].FMS = 1;
            Timbres[0].AMS = 0;
            Timbres[0].FB = 7;
            Timbres[0].ALG = 3;

            Timbres[0].Ops[0].Enable = 1;
            Timbres[0].Ops[0].AR = 31;
            Timbres[0].Ops[0].D1R = 6;
            Timbres[0].Ops[0].SL = 15;
            Timbres[0].Ops[0].D2R = 0;
            Timbres[0].Ops[0].RR = 7;

            Timbres[0].Ops[0].MUL = 1;
            Timbres[0].Ops[0].RS = 0;
            Timbres[0].Ops[0].DT1 = 7;
            Timbres[0].Ops[0].AM = 0;
            Timbres[0].Ops[0].SSG_EG = 0;
            Timbres[0].Ops[0].TL = 20;

            Timbres[0].Ops[1].Enable = 1;
            Timbres[0].Ops[1].AR = 31;
            Timbres[0].Ops[1].D1R = 7;
            Timbres[0].Ops[1].SL = 4;
            Timbres[0].Ops[1].D2R = 0;
            Timbres[0].Ops[1].RR = 15;

            Timbres[0].Ops[1].MUL = 2;
            Timbres[0].Ops[1].RS = 0;
            Timbres[0].Ops[1].DT1 = 6;
            Timbres[0].Ops[1].AM = 0;
            Timbres[0].Ops[1].SSG_EG = 0;
            Timbres[0].Ops[1].TL = 21;

            Timbres[0].Ops[2].Enable = 1;
            Timbres[0].Ops[2].AR = 31;
            Timbres[0].Ops[2].D1R = 7;
            Timbres[0].Ops[2].SL = 4;
            Timbres[0].Ops[2].D2R = 0;
            Timbres[0].Ops[2].RR = 15;

            Timbres[0].Ops[2].MUL = 1;
            Timbres[0].Ops[2].RS = 0;
            Timbres[0].Ops[2].DT1 = 2;
            Timbres[0].Ops[2].AM = 0;
            Timbres[0].Ops[2].SSG_EG = 0;
            Timbres[0].Ops[2].TL = 12;

            Timbres[0].Ops[3].Enable = 1;
            Timbres[0].Ops[3].AR = 31;
            Timbres[0].Ops[3].D1R = 0;
            Timbres[0].Ops[3].SL = 0;
            Timbres[0].Ops[3].D2R = 0;
            Timbres[0].Ops[3].RR = 15;

            Timbres[0].Ops[3].MUL = 1;
            Timbres[0].Ops[3].RS = 0;
            Timbres[0].Ops[3].DT1 = 4;
            Timbres[0].Ops[3].AM = 0;
            Timbres[0].Ops[3].SSG_EG = 0;
            Timbres[0].Ops[3].TL = 12;

            //Additive Chimes A.dmp
            Timbres[2].FMS = 0;
            Timbres[2].AMS = 0;
            Timbres[2].FB = 0;
            Timbres[2].ALG = 7;

            Timbres[2].Ops[0].AR = 31;
            Timbres[2].Ops[0].D1R = 4;
            Timbres[2].Ops[0].SL = 15;
            Timbres[2].Ops[0].D2R = 0;
            Timbres[2].Ops[0].RR = 4;

            Timbres[2].Ops[0].MUL = 1;
            Timbres[2].Ops[0].RS = 0;
            Timbres[2].Ops[0].DT1 = 4;
            Timbres[2].Ops[0].AM = 0;
            Timbres[2].Ops[0].SSG_EG = 0;
            Timbres[2].Ops[0].TL = 20;

            Timbres[2].Ops[1].AR = 31;
            Timbres[2].Ops[1].D1R = 7;
            Timbres[2].Ops[1].SL = 15;
            Timbres[2].Ops[1].D2R = 0;
            Timbres[2].Ops[1].RR = 5;

            Timbres[2].Ops[1].MUL = 4;
            Timbres[2].Ops[1].RS = 0;
            Timbres[2].Ops[1].DT1 = 4;
            Timbres[2].Ops[1].AM = 0;
            Timbres[2].Ops[1].SSG_EG = 0;
            Timbres[2].Ops[1].TL = 20;

            Timbres[2].Ops[2].AR = 31;
            Timbres[2].Ops[2].D1R = 10;
            Timbres[2].Ops[2].SL = 15;
            Timbres[2].Ops[2].D2R = 0;
            Timbres[2].Ops[2].RR = 6;

            Timbres[2].Ops[2].MUL = 7;
            Timbres[2].Ops[2].RS = 0;
            Timbres[2].Ops[2].DT1 = 4;
            Timbres[2].Ops[2].AM = 0;
            Timbres[2].Ops[2].SSG_EG = 0;
            Timbres[2].Ops[2].TL = 20;

            Timbres[2].Ops[3].AR = 31;
            Timbres[2].Ops[3].D1R = 13;
            Timbres[2].Ops[3].SL = 15;
            Timbres[2].Ops[3].D2R = 0;
            Timbres[2].Ops[3].RR = 7;

            Timbres[2].Ops[3].MUL = 10;
            Timbres[2].Ops[3].RS = 0;
            Timbres[2].Ops[3].DT1 = 0;
            Timbres[2].Ops[3].AM = 0;
            Timbres[2].Ops[3].SSG_EG = 0;
            Timbres[2].Ops[3].TL = 20;

            //DX Piano1
            Timbres[1].FMS = 0;
            Timbres[1].AMS = 0;
            Timbres[1].FB = 0;
            Timbres[1].ALG = 1;

            Timbres[1].Ops[0].AR = 31;
            Timbres[1].Ops[0].D1R = 9;
            Timbres[1].Ops[0].SL = 15;
            Timbres[1].Ops[0].D2R = 0;
            Timbres[1].Ops[0].RR = 5;

            Timbres[1].Ops[0].MUL = 9;
            Timbres[1].Ops[0].RS = 2;
            Timbres[1].Ops[0].DT1 = 7;
            Timbres[1].Ops[0].AM = 0;
            Timbres[1].Ops[0].SSG_EG = 0;
            Timbres[1].Ops[0].TL = 60;

            Timbres[1].Ops[1].AR = 31;
            Timbres[1].Ops[1].D1R = 9;
            Timbres[1].Ops[1].SL = 15;
            Timbres[1].Ops[1].D2R = 0;
            Timbres[1].Ops[1].RR = 5;

            Timbres[1].Ops[1].MUL = 9;
            Timbres[1].Ops[1].RS = 2;
            Timbres[1].Ops[1].DT1 = 1;
            Timbres[1].Ops[1].AM = 0;
            Timbres[1].Ops[1].SSG_EG = 0;
            Timbres[1].Ops[1].TL = 60;

            Timbres[1].Ops[2].AR = 31;
            Timbres[1].Ops[2].D1R = 7;
            Timbres[1].Ops[2].SL = 15;
            Timbres[1].Ops[2].D2R = 0;
            Timbres[1].Ops[2].RR = 5;

            Timbres[1].Ops[2].MUL = 0;
            Timbres[1].Ops[2].RS = 2;
            Timbres[1].Ops[2].DT1 = 4;
            Timbres[1].Ops[2].AM = 0;
            Timbres[1].Ops[2].SSG_EG = 0;
            Timbres[1].Ops[2].TL = 28;

            Timbres[1].Ops[3].AR = 31;
            Timbres[1].Ops[3].D1R = 3;
            Timbres[1].Ops[3].SL = 15;
            Timbres[1].Ops[3].D2R = 0;
            Timbres[1].Ops[3].RR = 5;

            Timbres[1].Ops[3].MUL = 0;
            Timbres[1].Ops[3].RS = 2;
            Timbres[1].Ops[3].DT1 = 4;
            Timbres[1].Ops[3].AM = 0;
            Timbres[1].Ops[3].SSG_EG = 0;
            Timbres[1].Ops[3].TL = 10;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="midiEvent"></param>
        protected override void OnNoteOnEvent(TaggedNoteOnEvent midiEvent)
        {
            /*
            var fileName = @"C:\Users\zanac2\Desktop\opna.dat";
            using (var reader = new System.IO.BinaryReader(new System.IO.FileStream(fileName, System.IO.FileMode.Open)))
            {
                for (int i = 0; i < 128; i++)
                {
                    byte data = reader.ReadByte();
                    Timbres[i].ALG = (byte)(data & 0x7);
                    Timbres[i].FB = (byte)((data >> 3) & 0x7);

                    Timbres[i].Ops[0].AR = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[2].AR = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[1].AR = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[3].AR = (byte)(31 - reader.ReadByte());

                    data = reader.ReadByte();
                    Timbres[i].Ops[0].Enable = (byte)(data >> 0 & 1);
                    Timbres[i].Ops[2].Enable = (byte)(data >> 1 & 1);
                    Timbres[i].Ops[1].Enable = (byte)(data >> 2 & 1);
                    Timbres[i].Ops[3].Enable = (byte)(data >> 3 & 1);

                    Timbres[i].Ops[0].D1R = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[2].D1R = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[1].D1R = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[3].D1R = (byte)(31 - reader.ReadByte());
                    //Timbres[i].Ops[0].D1R = reader.ReadByte();
                    //Timbres[i].Ops[2].D1R = reader.ReadByte();
                    //Timbres[i].Ops[1].D1R = reader.ReadByte();
                    //Timbres[i].Ops[3].D1R = reader.ReadByte();

                    data = reader.ReadByte();   // LFO WF

                    Timbres[i].Ops[0].D2R = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[2].D2R = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[1].D2R = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[3].D2R = (byte)(31 - reader.ReadByte());
                    //Timbres[i].Ops[0].D2R = reader.ReadByte();
                    //Timbres[i].Ops[2].D2R = reader.ReadByte();
                    //Timbres[i].Ops[1].D2R = reader.ReadByte();
                    //Timbres[i].Ops[3].D2R = reader.ReadByte();

                    data = reader.ReadByte();   // LFO SYNC DELAY

                    Timbres[i].Ops[0].RR = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[2].RR = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[1].RR = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[3].RR = (byte)(31 - reader.ReadByte());

                    data = reader.ReadByte();   // LFO SPD

                    Timbres[i].Ops[0].SL = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[2].SL = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[1].SL = (byte)(31 - reader.ReadByte());
                    Timbres[i].Ops[3].SL = (byte)(31 - reader.ReadByte());
                    //Timbres[i].Ops[0].SL = reader.ReadByte();
                    //Timbres[i].Ops[2].SL = reader.ReadByte();
                    //Timbres[i].Ops[1].SL = reader.ReadByte();
                    //Timbres[i].Ops[3].SL = reader.ReadByte();

                    data = reader.ReadByte();   // LFO PMD

                    Timbres[i].Ops[0].TL = (byte)(127 - reader.ReadByte());
                    Timbres[i].Ops[2].TL = (byte)(127 - reader.ReadByte());
                    Timbres[i].Ops[1].TL = (byte)(127 - reader.ReadByte());
                    Timbres[i].Ops[3].TL = (byte)(127 - reader.ReadByte());

                    data = reader.ReadByte();   // LFO AMD

                    Timbres[i].Ops[0].RS = reader.ReadByte();
                    Timbres[i].Ops[2].RS = reader.ReadByte();
                    Timbres[i].Ops[1].RS = reader.ReadByte();
                    Timbres[i].Ops[3].RS = reader.ReadByte();

                    data = reader.ReadByte();   // PMS

                    Timbres[i].Ops[0].MUL = reader.ReadByte();
                    Timbres[i].Ops[2].MUL = reader.ReadByte();
                    Timbres[i].Ops[1].MUL = reader.ReadByte();
                    Timbres[i].Ops[3].MUL = reader.ReadByte();

                    data = reader.ReadByte();   // DMY

                    data = reader.ReadByte();
                    switch (data) {
                        case 4:
                            break;
                        case 5:
                            data = 0x7;
                            break;
                        case 7:
                            data = 0x5;
                            break;
                    }
                    Timbres[i].Ops[0].DT1 = data;
                    data = reader.ReadByte();
                    switch (data)
                    {
                        case 4:
                            break;
                        case 5:
                            data = 0x7;
                            break;
                        case 7:
                            data = 0x5;
                            break;
                    }
                    Timbres[i].Ops[2].DT1 = data;
                    data = reader.ReadByte();
                    switch (data)
                    {
                        case 4:
                            break;
                        case 5:
                            data = 0x7;
                            break;
                        case 7:
                            data = 0x5;
                            break;
                    }
                    Timbres[i].Ops[1].DT1 = data;
                    data = reader.ReadByte();
                    switch (data)
                    {
                        case 4:
                            break;
                        case 5:
                            data = 0x7;
                            break;
                        case 7:
                            data = 0x5;
                            break;
                    }
                    Timbres[i].Ops[3].DT1 = data;

                    data = reader.ReadByte();   // DMY

                    Timbres[i].Ops[0].AM = (reader.ReadByte() != 0) ? (byte)1 : (byte)0;
                    Timbres[i].Ops[2].AM = (reader.ReadByte() != 0) ? (byte)1 : (byte)0;
                    Timbres[i].Ops[1].AM = (reader.ReadByte() != 0) ? (byte)1 : (byte)0;
                    Timbres[i].Ops[3].AM = (reader.ReadByte() != 0) ? (byte)1 : (byte)0;

                    reader.ReadBytes(14);   // DMY
                }
            }
            //*/
            soundManager.KeyOn(midiEvent);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="midiEvent"></param>
        protected override void OnNoteOffEvent(NoteOffEvent midiEvent)
        {
            soundManager.KeyOff(midiEvent);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="midiEvent"></param>
        protected override void OnControlChangeEvent(ControlChangeEvent midiEvent)
        {
            base.OnControlChangeEvent(midiEvent);

            soundManager.ControlChange(midiEvent);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="midiEvent"></param>
        protected override void OnPitchBendEvent(PitchBendEvent midiEvent)
        {
            base.OnPitchBendEvent(midiEvent);

            soundManager.PitchBend(midiEvent);
        }

        internal override void AllSoundOff()
        {
            soundManager.AllSoundOff();
        }

        /// <summary>
        /// 
        /// </summary>
        private class YM2612SoundManager : SoundManagerBase
        {
            private static SoundList<SoundBase> allSound = new SoundList<SoundBase>(-1);

            /// <summary>
            /// 
            /// </summary>
            protected override SoundList<SoundBase> AllSounds
            {
                get
                {
                    return allSound;
                }
            }

            private static SoundList<YM2612Sound> fmOnSounds = new SoundList<YM2612Sound>(6);

            private YM2612 parentModule;

            /// <summary>
            /// 
            /// </summary>
            /// <param name="parent"></param>
            public YM2612SoundManager(YM2612 parent) : base(parent)
            {
                this.parentModule = parent;
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="note"></param>
            public override SoundBase[] SoundOn(TaggedNoteOnEvent note)
            {
                List<SoundBase> rv = new List<SoundBase>();

                foreach (YM2612Timbre timbre in parentModule.GetBaseTimbres(note))
                {
                    var emptySlot = searchEmptySlot(note);
                    if (emptySlot.slot < 0)
                        continue;

                    YM2612Sound snd = new YM2612Sound(emptySlot.inst, this, timbre, note, emptySlot.slot);
                    fmOnSounds.Add(snd);
                    FormMain.OutputDebugLog("KeyOn FM ch" + emptySlot + " " + note.ToString());
                    snd.KeyOn();
                    rv.Add(snd);
                }

                return rv.ToArray();
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns></returns>
            private (YM2612 inst, int slot) searchEmptySlot(TaggedNoteOnEvent note)
            {
                return SearchEmptySlotAndOffForLeader(parentModule, fmOnSounds, note, 6);
            }

            internal override void AllSoundOff()
            {
                var me = new ControlChangeEvent((SevenBitNumber)120, (SevenBitNumber)0);
                ControlChange(me);

                for (int i = 0; i < 8; i++)
                {
                    uint reg = (uint)(i / 3) * 2;
                    Ym2612WriteData(parentModule.UnitNumber, 0x28, 0, 0, (byte)(0x00 | (reg << 1) | (byte)(i % 3)));
                }
            }

        }


        /// <summary>
        /// 
        /// </summary>
        private class YM2612Sound : SoundBase
        {

            private YM2612 parentModule;

            private YM2612Timbre timbre;

            /// <summary>
            /// 
            /// </summary>
            /// <param name="parentModule"></param>
            /// <param name="noteOnEvent"></param>
            /// <param name="programNumber"></param>
            /// <param name="slot"></param>
            public YM2612Sound(YM2612 parentModule, YM2612SoundManager manager, TimbreBase timbre, TaggedNoteOnEvent noteOnEvent, int slot) : base(parentModule, manager, timbre, noteOnEvent, slot)
            {
                this.parentModule = parentModule;
                this.timbre = (YM2612Timbre)timbre;
            }

            /// <summary>
            /// 
            /// </summary>
            public override void KeyOn()
            {
                base.KeyOn();

                var gs = timbre.GlobalSettings;
                if (gs.Enable)
                {
                    if (gs.LFOEN.HasValue)
                        parentModule.LFOEN = gs.LFOEN.Value;
                    if (gs.LFRQ.HasValue)
                        parentModule.LFRQ = gs.LFRQ.Value;
                }

                //
                SetFmTimbre();
                //Freq
                OnPitchUpdated();
                //Volume
                OnVolumeUpdated();
                //On
                uint reg = (uint)(Slot / 3) * 2;
                byte op = (byte)(timbre.Ops[0].Enable << 4 | timbre.Ops[1].Enable << 5 | timbre.Ops[2].Enable << 6 | timbre.Ops[3].Enable << 7);
                Ym2612WriteData(parentModule.UnitNumber, 0x28, 0, 0, (byte)(op | (reg << 1) | (byte)(Slot % 3)));
            }


            public override void OnSoundParamsUpdated()
            {
                base.OnSoundParamsUpdated();

                var gs = timbre.GlobalSettings;
                if (gs.Enable)
                {
                    if (gs.LFOEN.HasValue)
                        parentModule.LFOEN = gs.LFOEN.Value;
                    if (gs.LFRQ.HasValue)
                        parentModule.LFRQ = gs.LFRQ.Value;
                }

                for (int op = 0; op < 4; op++)
                {
                    //$30+: multiply and detune
                    Ym2612WriteData(parentModule.UnitNumber, 0x30, op, Slot, (byte)((timbre.Ops[op].DT1 << 4 | timbre.Ops[op].MUL)));
                    //$40+: total level
                    switch (timbre.ALG)
                    {
                        case 0:
                            if (op != 3)
                                Ym2612WriteData(parentModule.UnitNumber, 0x40, op, Slot, (byte)timbre.Ops[op].TL);
                            break;
                        case 1:
                            if (op != 3)
                                Ym2612WriteData(parentModule.UnitNumber, 0x40, op, Slot, (byte)timbre.Ops[op].TL);
                            break;
                        case 2:
                            if (op != 3)
                                Ym2612WriteData(parentModule.UnitNumber, 0x40, op, Slot, (byte)timbre.Ops[op].TL);
                            break;
                        case 3:
                            if (op != 3)
                                Ym2612WriteData(parentModule.UnitNumber, 0x40, op, Slot, (byte)timbre.Ops[op].TL);
                            break;
                        case 4:
                            if (op != 1 && op != 3)
                                Ym2612WriteData(parentModule.UnitNumber, 0x40, op, Slot, (byte)timbre.Ops[op].TL);
                            break;
                        case 5:
                            if (op == 4)
                                Ym2612WriteData(parentModule.UnitNumber, 0x40, op, Slot, (byte)timbre.Ops[op].TL);
                            break;
                        case 6:
                            if (op == 4)
                                Ym2612WriteData(parentModule.UnitNumber, 0x40, op, Slot, (byte)timbre.Ops[op].TL);
                            break;
                        case 7:
                            break;
                    }
                    //$50+: attack rate and rate scaling
                    Ym2612WriteData(parentModule.UnitNumber, 0x50, op, Slot, (byte)((timbre.Ops[op].RS << 6 | timbre.Ops[op].AR)));
                    //$60+: 1st decay rate and AM enable
                    Ym2612WriteData(parentModule.UnitNumber, 0x60, op, Slot, (byte)((timbre.Ops[op].AM << 7 | timbre.Ops[op].D1R)));
                    //$70+: 2nd decay rate
                    Ym2612WriteData(parentModule.UnitNumber, 0x70, op, Slot, (byte)timbre.Ops[op].D2R);
                    //$80+: release rate and sustain level
                    Ym2612WriteData(parentModule.UnitNumber, 0x80, op, Slot, (byte)((timbre.Ops[op].SL << 4 | timbre.Ops[op].RR)));
                    //$90+: SSG-EG
                    Ym2612WriteData(parentModule.UnitNumber, 0x90, op, Slot, (byte)timbre.Ops[op].SSG_EG);
                }

                //$B0+: algorithm and feedback
                Ym2612WriteData(parentModule.UnitNumber, 0xB0, 0, Slot, (byte)(timbre.FB << 3 | timbre.ALG));

                OnPanpotUpdated();
                //Volume
                OnVolumeUpdated();
            }

            /// <summary>
            /// 
            /// </summary>
            public override void OnVolumeUpdated()
            {
                if (IsSoundOff)
                    return;

                List<int> ops = new List<int>();
                switch (timbre.ALG)
                {
                    case 0:
                        ops.Add(3);
                        break;
                    case 1:
                        ops.Add(3);
                        break;
                    case 2:
                        ops.Add(3);
                        break;
                    case 3:
                        ops.Add(3);
                        break;
                    case 4:
                        ops.Add(1);
                        ops.Add(3);
                        break;
                    case 5:
                        ops.Add(1);
                        ops.Add(2);
                        ops.Add(3);
                        break;
                    case 6:
                        ops.Add(1);
                        ops.Add(2);
                        ops.Add(3);
                        break;
                    case 7:
                        ops.Add(0);
                        ops.Add(1);
                        ops.Add(2);
                        ops.Add(3);
                        break;
                }
                var v = CalcCurrentVolume();
                foreach (int op in ops)
                {
                    //$40+: total level
                    Ym2612WriteData(parentModule.UnitNumber, 0x40, op, Slot, (byte)((127 / 3) - Math.Round(((127 / 3) - (timbre.Ops[op].TL / 3)) * v)));
                }
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="slot"></param>
            public override void OnPitchUpdated()
            {
                double d = CalcCurrentPitch();

                int nn = NoteOnEvent.NoteNumber;
                if (ParentModule.ChannelTypes[NoteOnEvent.Channel] == ChannelType.Drum)
                    nn = (int)ParentModule.DrumTimbres[NoteOnEvent.NoteNumber].BaseNote;
                int noteNum = nn + (int)d;
                if (noteNum > 127)
                    noteNum = 127;
                else if (noteNum < 0)
                    noteNum = 0;
                var nnOn = new TaggedNoteOnEvent((SevenBitNumber)noteNum, (SevenBitNumber)127);
                ushort freq = convertFmFrequency(nnOn);
                var octave = nnOn.GetNoteOctave();
                if (octave < 0)
                {
                    octave = 0;
                    freq = freqTable[0];
                }
                if (octave > 7)
                {
                    octave = 7;
                    freq = freqTable[13];
                }
                octave = octave << 3;

                if (d != 0)
                    freq += (ushort)(((double)(convertFmFrequency(nnOn, (d < 0) ? false : true) - freq)) * Math.Abs(d - Math.Truncate(d)));

                Ym2612WriteData(parentModule.UnitNumber, 0xa4, 0, Slot, (byte)(octave | ((freq >> 8) & 7)));
                Ym2612WriteData(parentModule.UnitNumber, 0xa0, 0, Slot, (byte)(0xff & freq));

                base.OnPitchUpdated();
            }

            /// <summary>
            /// 
            /// </summary>
            public override void OnPanpotUpdated()
            {
                //$B4+: panning, FMS, AMS
                byte pan = parentModule.Panpots[NoteOnEvent.Channel];
                if (pan < 32)
                    pan = 0x2;
                else if (pan > 96)
                    pan = 0x1;
                else
                    pan = 0x3;
                Ym2612WriteData(parentModule.UnitNumber, 0xB4, 0, Slot, (byte)(pan << 6 | (timbre.AMS << 4) | timbre.FMS));
            }

            /// <summary>
            /// 
            /// </summary>
            public void SetFmTimbre()
            {
                for (int op = 0; op < 4; op++)
                {
                    //$30+: multiply and detune
                    Ym2612WriteData(parentModule.UnitNumber, 0x30, op, Slot, (byte)((timbre.Ops[op].DT1 << 4 | timbre.Ops[op].MUL)));
                    //$40+: total level
                    Ym2612WriteData(parentModule.UnitNumber, 0x40, op, Slot, (byte)timbre.Ops[op].TL);
                    //$50+: attack rate and rate scaling
                    Ym2612WriteData(parentModule.UnitNumber, 0x50, op, Slot, (byte)((timbre.Ops[op].RS << 6 | timbre.Ops[op].AR)));
                    //$60+: 1st decay rate and AM enable
                    Ym2612WriteData(parentModule.UnitNumber, 0x60, op, Slot, (byte)((timbre.Ops[op].AM << 7 | timbre.Ops[op].D1R)));
                    //$70+: 2nd decay rate
                    Ym2612WriteData(parentModule.UnitNumber, 0x70, op, Slot, (byte)timbre.Ops[op].D2R);
                    //$80+: release rate and sustain level
                    Ym2612WriteData(parentModule.UnitNumber, 0x80, op, Slot, (byte)((timbre.Ops[op].SL << 4 | timbre.Ops[op].RR)));
                    //$90+: SSG-EG
                    Ym2612WriteData(parentModule.UnitNumber, 0x90, op, Slot, (byte)timbre.Ops[op].SSG_EG);
                }

                //$B0+: algorithm and feedback
                Ym2612WriteData(parentModule.UnitNumber, 0xB0, 0, Slot, (byte)(timbre.FB << 3 | timbre.ALG));

                OnPanpotUpdated();
            }

            /// <summary>
            /// 
            /// </summary>
            public override void SoundOff()
            {
                base.SoundOff();

                uint reg = (uint)(Slot / 3) * 2;
                Ym2612WriteData(parentModule.UnitNumber, 0x28, 0, 0, (byte)(0x00 | (reg << 1) | (byte)(Slot % 3)));
            }

            private ushort[] freqTable = new ushort[] {
                1214/2,
                644,
                681,
                722,
                765,
                810,
                858,
                910,
                964,
                1021,
                1081,
                1146,
                1214,
                644*2,
            };

            /// <summary>
            /// 
            /// </summary>
            /// <param name="note"></param>
            /// <param name="freq"></param>
            /// <returns></returns>
            private ushort convertFmFrequency(TaggedNoteOnEvent note)
            {
                return freqTable[(int)note.GetNoteName() + 1];
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="note"></param>
            /// <param name="freq"></param>
            /// <returns></returns>
            private ushort convertFmFrequency(TaggedNoteOnEvent note, bool plus)
            {
                if (plus)
                    return freqTable[(int)note.GetNoteName() + 2];
                else
                    return freqTable[(int)note.GetNoteName()];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [JsonConverter(typeof(NoTypeConverterJsonConverter<YM2612Timbre>))]
        [DataContract]
        public class YM2612Timbre : TimbreBase
        {
            #region FM Symth

            private byte f_ALG;

            [DataMember]
            [Category("Sound")]
            [Description("Algorithm (0-7)\r\n" +
                "0: 1->2->3->4 (for Distortion guitar sound)\r\n" +
                "1: (1+2)->3->4 (for Harp, PSG sound)\r\n" +
                "2: (1+(2->3))->4 (for Bass, electric guitar, brass, piano, woods sound)\r\n" +
                "3: ((1->2)+3)->4 (for Strings, folk guitar, chimes sound)\r\n" +
                "4: (1->2)+(3->4) (for Flute, bells, chorus, bass drum, snare drum, tom-tom sound)\r\n" +
                "5: (1->2)+(1->3)+(1->4) (for Brass, organ sound)\r\n" +
                "6: (1->2)+3+4 (for Xylophone, tom-tom, organ, vibraphone, snare drum, base drum sound)\r\n" +
                "7: 1+2+3+4 (for Pipe organ sound)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 7)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte ALG
            {
                get
                {
                    return f_ALG;
                }
                set
                {
                    f_ALG = (byte)(value & 7);
                }
            }

            private byte f_FB;

            [DataMember]
            [Category("Sound")]
            [Description("Feedback (0-7)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 7)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte FB
            {
                get
                {
                    return f_FB;
                }
                set
                {
                    f_FB = (byte)(value & 7);
                }
            }

            private byte f_AMS;

            [DataMember]
            [Category("Sound")]
            [Description("Amplitude Modulation Sensitivity (0-3)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 3)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte AMS
            {
                get
                {
                    return f_AMS;
                }
                set
                {
                    f_AMS = (byte)(value & 3);
                }
            }

            private byte f_FMS;

            [DataMember]
            [Category("Sound")]
            [Description("Frequency Modulation Sensitivity (0-7)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 7)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte FMS
            {
                get
                {
                    return f_FMS;
                }
                set
                {
                    f_FMS = (byte)(value & 7);
                }
            }

            #endregion


            /// <summary>
            /// 
            /// </summary>
            [DataMember]
            [Category("Sound")]
            [Description("Operators")]
            [DefaultValue((byte)0)]
            [TypeConverter(typeof(ExpandableCollectionConverter))]
            [DisplayName("Operators(Ops)")]
            public YM2612Operator[] Ops
            {
                get;
                set;
            }

            [Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
                typeof(UITypeEditor)), Localizable(false)]
            [IgnoreDataMember]
            [JsonIgnore]
            [Description("You can copy and paste this text data to other same type timber.\r\n" +
                "ALG, FB, AR, D1R(DR), D2R(SR), RR, SL, TL, RS(KS), MUL, DT1, AM(AMS), SSG_EG, ... , AMS, FMS\r\n" +
                "You can use comma or space chars as delimiter.")]
            public string MmlSerializeData
            {
                get
                {
                    return SimpleSerializer.SerializeProps(this,
                        nameof(ALG),
                        nameof(FB),

                        "Ops[0].AR",
                        "Ops[0].D1R",
                        "Ops[0].D2R",
                        "Ops[0].RR",
                        "Ops[0].SL",
                        "Ops[0].TL",
                        "Ops[0].RS",
                        "Ops[0].MUL",
                        "Ops[0].DT1",
                        "Ops[0].AM",
                        "Ops[0].SSG_EG",

                        "Ops[1].AR",
                        "Ops[1].D1R",
                        "Ops[1].D2R",
                        "Ops[1].RR",
                        "Ops[1].SL",
                        "Ops[1].TL",
                        "Ops[1].RS",
                        "Ops[1].MUL",
                        "Ops[1].DT1",
                        "Ops[1].AM",
                        "Ops[1].SSG_EG",

                        "Ops[2].AR",
                        "Ops[2].D1R",
                        "Ops[2].D2R",
                        "Ops[2].RR",
                        "Ops[2].SL",
                        "Ops[2].TL",
                        "Ops[2].RS",
                        "Ops[2].MUL",
                        "Ops[2].DT1",
                        "Ops[2].AM",
                        "Ops[2].SSG_EG",

                        "Ops[3].AR",
                        "Ops[3].D1R",
                        "Ops[3].D2R",
                        "Ops[3].RR",
                        "Ops[3].SL",
                        "Ops[3].TL",
                        "Ops[3].RS",
                        "Ops[3].MUL",
                        "Ops[3].DT1",
                        "Ops[3].AM",
                        "Ops[3].SSG_EG",

                        nameof(AMS),
                        nameof(FMS));
                }
                set
                {
                    SimpleSerializer.DeserializeProps(this, value,
                           nameof(ALG),
                        nameof(FB),

                        "Ops[0].AR",
                        "Ops[0].D1R",
                        "Ops[0].D2R",
                        "Ops[0].RR",
                        "Ops[0].SL",
                        "Ops[0].TL",
                        "Ops[0].RS",
                        "Ops[0].MUL",
                        "Ops[0].DT1",
                        "Ops[0].AM",
                        "Ops[0].SSG_EG",

                        "Ops[1].AR",
                        "Ops[1].D1R",
                        "Ops[1].D2R",
                        "Ops[1].RR",
                        "Ops[1].SL",
                        "Ops[1].TL",
                        "Ops[1].RS",
                        "Ops[1].MUL",
                        "Ops[1].DT1",
                        "Ops[1].AM",
                        "Ops[1].SSG_EG",

                        "Ops[2].AR",
                        "Ops[2].D1R",
                        "Ops[2].D2R",
                        "Ops[2].RR",
                        "Ops[2].SL",
                        "Ops[2].TL",
                        "Ops[2].RS",
                        "Ops[2].MUL",
                        "Ops[2].DT1",
                        "Ops[2].AM",
                        "Ops[2].SSG_EG",

                        "Ops[3].AR",
                        "Ops[3].D1R",
                        "Ops[3].D2R",
                        "Ops[3].RR",
                        "Ops[3].SL",
                        "Ops[3].TL",
                        "Ops[3].RS",
                        "Ops[3].MUL",
                        "Ops[3].DT1",
                        "Ops[3].AM",
                        "Ops[3].SSG_EG",

                        nameof(AMS),
                        nameof(FMS));
                }
            }

            [DataMember]
            [Category("Chip")]
            [Description("Global Settings")]
            public YM2612GlobalSettings GlobalSettings
            {
                get;
                set;
            }

            /// <summary>
            /// 
            /// </summary>
            public YM2612Timbre()
            {
                Ops = new YM2612Operator[] {
                    new YM2612Operator(),
                    new YM2612Operator(),
                    new YM2612Operator(),
                    new YM2612Operator() };
                GlobalSettings = new YM2612GlobalSettings();
                this.SDS.FxS = new BasicFxSettings();
            }

            public override void RestoreFrom(string serializeData)
            {
                try
                {
                    var obj = JsonConvert.DeserializeObject<YM2612Timbre>(serializeData);
                    this.InjectFrom(new LoopInjection(new[] { "SerializeData" }), obj);
                }
                catch (Exception ex)
                {
                    if (ex.GetType() == typeof(Exception))
                        throw;
                    else if (ex.GetType() == typeof(SystemException))
                        throw;


                    System.Windows.Forms.MessageBox.Show(ex.ToString());
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TypeConverter(typeof(CustomExpandableObjectConverter))]
        [JsonConverter(typeof(NoTypeConverterJsonConverter<YM2612Operator>))]
        [DataContract]
        [MidiHook]
        public class YM2612Operator : ContextBoundObject
        {
            private byte f_Enable = 1;

            /// <summary>
            /// Enable(0-1)
            /// </summary>
            [DataMember]
            [Category("Sound")]
            [Description("Whether this operator enable or not")]
            [DefaultValue((byte)1)]
            public byte Enable
            {
                get
                {
                    return f_Enable;
                }
                set
                {
                    f_Enable = (byte)(value & 1);
                }
            }

            private byte f_AR;

            /// <summary>
            /// Attack Rate(0-31)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("Attack Rate (0-31)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 31)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte AR
            {
                get
                {
                    return f_AR;
                }
                set
                {
                    f_AR = (byte)(value & 31);
                }
            }

            private byte f_D1R;

            /// <summary>
            /// decay rate(0-31)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("Decay Rate (0-31)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 31)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte D1R
            {
                get
                {
                    return f_D1R;
                }
                set
                {
                    f_D1R = (byte)(value & 31);
                }
            }

            private byte f_D2R;

            /// <summary>
            /// Sustain Rate(2nd Decay Rate)(0-31)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("Sustain Rate(2nd Decay Rate) (0-31)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 31)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte D2R
            {
                get
                {
                    return f_D2R;
                }
                set
                {
                    f_D2R = (byte)(value & 31);
                }
            }

            private byte f_RR;

            /// <summary>
            /// release rate(0-15)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("Release Rate (0-15)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 15)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte RR
            {
                get
                {
                    return f_RR;
                }
                set
                {
                    f_RR = (byte)(value & 15);
                }
            }

            private byte f_SL;

            /// <summary>
            /// sustain level(0-15)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("Sustain Level(0-15)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 15)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte SL
            {
                get
                {
                    return f_SL;
                }
                set
                {
                    f_SL = (byte)(value & 15);
                }
            }

            private byte f_TL;

            /// <summary>
            /// Total Level(0-127)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("Total Level (0-127)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 127)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte TL
            {
                get
                {
                    return f_TL;
                }
                set
                {
                    f_TL = (byte)(value & 127);
                }
            }

            private byte f_RS;

            /// <summary>
            /// Rate Scaling(0-3)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("Rate Scaling (0-3)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 3)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte RS
            {
                get
                {
                    return f_RS;
                }
                set
                {
                    f_RS = (byte)(value & 3);
                }
            }

            private byte f_MUL;

            /// <summary>
            /// Multiply(0-15)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("Multiply (0-15)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 15)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte MUL
            {
                get
                {
                    return f_MUL;
                }
                set
                {
                    f_MUL = (byte)(value & 15);
                }
            }

            private byte f_DT1 = 4;

            /// <summary>
            /// Detune1(0-7)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("DeTune 1 (7(-3),6(-2),5(-1),4(+0),0(+0),1(+1),2(+2),3(+3))")]
            [DefaultValue((byte)4)]
            [SlideParametersAttribute(1, 7)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte DT1
            {
                get
                {
                    return f_DT1;
                }
                set
                {
                    f_DT1 = (byte)(value & 7);
                }
            }


            private byte f_AM;

            /// <summary>
            /// amplitude modulation sensivity(0-1)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("Amplitude Modulation Sensivity (0-1)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 1)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte AM
            {
                get
                {
                    return f_AM;
                }
                set
                {
                    f_AM = (byte)(value & 1);
                }
            }

            private byte f_SSG_EG;

            /// <summary>
            /// SSG-EG(0-15)
            /// </summary>
            [DataMember]
            [Category("Sound(FM)")]
            [Description("SSG-EG (0-15)")]
            [DefaultValue((byte)0)]
            [SlideParametersAttribute(0, 15)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte SSG_EG
            {
                get
                {
                    return f_SSG_EG;
                }
                set
                {
                    f_SSG_EG = (byte)(value & 15);
                }
            }

            #region Etc

            [DataMember]
            [Description("Memo")]
            public string Memo
            {
                get;
                set;
            }

            [Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
                typeof(UITypeEditor)), Localizable(false)]
            [IgnoreDataMember]
            [JsonIgnore]
            [Description("You can copy and paste this text data to other same type timber.\r\n" +
                "AR, D1R(DR), D2R(SR), RR, SL, TL, RS(KS), MUL, DT1, AM(AMS), SSG_EG\r\n" +
                "You can use comma or space chars as delimiter.")]
            public string MmlSerializeData
            {
                get
                {
                    return SimpleSerializer.SerializeProps(this,
                        nameof(AR),
                        nameof(D1R),
                        nameof(D2R),
                        nameof(RR),
                        nameof(SL),
                        nameof(TL),
                        nameof(RS),
                        nameof(MUL),
                        nameof(DT1),
                        nameof(AM),
                        nameof(SSG_EG));
                }
                set
                {
                    SimpleSerializer.DeserializeProps(this, value,
                        nameof(AR),
                        nameof(D1R),
                        nameof(D2R),
                        nameof(RR),
                        nameof(SL),
                        nameof(TL),
                        nameof(RS),
                        nameof(MUL),
                        nameof(DT1),
                        nameof(AM),
                        nameof(SSG_EG));
                }
            }

            [Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
                typeof(UITypeEditor)), Localizable(false)]
            [IgnoreDataMember]
            [JsonIgnore]
            [Description("You can copy and paste this text data to other same type timber.\r\nNote: Open dropdown editor then copy all text and paste to dropdown editor. Do not copy and paste one liner text.")]
            public string SerializeData
            {
                get
                {
                    return JsonConvert.SerializeObject(this, Formatting.Indented);
                }
                set
                {
                    RestoreFrom(value);
                }
            }

            public void RestoreFrom(string serializeData)
            {
                try
                {
                    var obj = JsonConvert.DeserializeObject<YM2612Operator>(serializeData);
                    this.InjectFrom(new LoopInjection(new[] { "SerializeData" }), obj);
                }
                catch (Exception ex)
                {
                    if (ex.GetType() == typeof(Exception))
                        throw;
                    else if (ex.GetType() == typeof(SystemException))
                        throw;


                    System.Windows.Forms.MessageBox.Show(ex.ToString());
                }
            }

            #endregion

        }


        [TypeConverter(typeof(CustomExpandableObjectConverter))]
        [JsonConverter(typeof(NoTypeConverterJsonConverter<YM2612GlobalSettings>))]
        [DataContract]
        [MidiHook]
        public class YM2612GlobalSettings : ContextBoundObject
        {
            [DataMember]
            [Category("Chip")]
            [Description("Override global settings")]
            public bool Enable
            {
                get;
                set;
            }

            private byte? f_LFOEN;

            /// <summary>
            /// LFRQ (0-255)
            /// </summary>
            [DataMember]
            [Category("Chip")]
            [Description("LFO Enable (0:Off 1:Enable)")]
            [DefaultValue(null)]
            [SlideParametersAttribute(0, 1)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte? LFOEN
            {
                get
                {
                    return f_LFOEN;
                }
                set
                {
                    byte? v = value;
                    if (value.HasValue)
                        v = (byte)(value & 1);
                    f_LFOEN = v;
                }
            }

            private byte? f_LFRQ;

            /// <summary>
            /// LFRQ (0-7)
            /// </summary>
            [DataMember]
            [Category("Chip")]
            [Description("LFO Freq (0-7)\r\n" +
                "0:	3.82 Hz\r\n" +
                "1: 5.33 Hz\r\n" +
                "2: 5.77 Hz\r\n" +
                "3: 6.11 Hz\r\n" +
                "4: 6.60 Hz\r\n" +
                "5: 9.23 Hz\r\n" +
                "6: 46.11 Hz\r\n" +
                "7: 69.22 Hz\r\n")]
            [DefaultValue(null)]
            [SlideParametersAttribute(0, 7)]
            [EditorAttribute(typeof(SlideEditor), typeof(System.Drawing.Design.UITypeEditor))]
            public byte? LFRQ
            {
                get
                {
                    return f_LFRQ;
                }
                set
                {
                    byte? v = value;
                    if (value.HasValue)
                        v = (byte)(value & 7);
                    f_LFRQ = v;
                }
            }

        }

    }
}